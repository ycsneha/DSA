package com.palle;



//Node.java
class Node {
 int data;
 Node next;

 public Node(int data) {
     this.data = data;
     this.next = null;
 }
}

//InsertAtNthPosition.java
public class PrintReverse  {
 private Node head;

 public PrintReverse () {
     this.head = null;
 }

 public void insertAtPosition(int data, int position) {
     Node newNode = new Node(data);

     if (position == 1) {
         newNode.next = head;
         head = newNode;
         return;
     }

     Node temp = head;
     for (int i = 1; i < position - 1 && temp != null; i++) {
         temp = temp.next;
     }

     if (temp == null) {
         System.out.println("Position out of range!");
         return;
     }

     newNode.next = temp.next;
     temp.next = newNode;
 }

 public void printList() {
     Node temp = head;
     while (temp != null) {
         System.out.print(temp.data + " -> ");
         temp = temp.next;
     }
     System.out.println("null");
 }

 // ðŸ”¹ Reverse display using recursion
 public void printReverse() {
     printReverseRecursive(head);
     System.out.println("null");
 }

 private void printReverseRecursive(Node node) {
     if (node == null) {
         return;
     }
     printReverseRecursive(node.next);
     System.out.print(node.data + " -> ");
 }

 public static void main(String[] args) {
	 PrintReverse  list = new PrintReverse ();

     list.insertAtPosition(10, 1);
     list.insertAtPosition(20, 2);
     list.insertAtPosition(30, 3);
     list.insertAtPosition(15, 2);

     System.out.println("After insertions:");
     list.printList();

     System.out.println("Reverse order:");
     list.printReverse();
 }
}
