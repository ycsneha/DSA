class Node {
    int data;
    Node next;

    Node(int data) {
        this.data = data;
        this.next = null;
    }
}

public class LinkedListCycle {
    // Function to detect cycle
    public static boolean hasCycle(Node head) {
        if (head == null) return false;

        Node slow = head;
        Node fast = head;

        while (fast != null && fast.next != null) {
            slow = slow.next;         // move 1 step
            fast = fast.next.next;    // move 2 steps

            if (slow == fast) {       // cycle detected
                return true;
            }
        }
        return false;  // no cycle
    }

    public static void main(String[] args) {
        // Creating nodes
        Node head = new Node(1);
        head.next = new Node(2);
        head.next.next = new Node(3);
        head.next.next.next = new Node(4);
        head.next.next.next.next = new Node(5);

        // Create a cycle: 5 -> points to node 2
        head.next.next.next.next.next = head.next;

        // Check cycle
        if (hasCycle(head)) {
            System.out.println("Cycle Detected ");
        } else {
            System.out.println("No Cycle ");
        }
    }
}
